<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>database on wuliuqi</title>
    <link>https://wuliuqii.github.io/tags/database/</link>
    <description>Recent content in database on wuliuqi</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sat, 30 Apr 2022 16:19:01 +0800</lastBuildDate><atom:link href="https://wuliuqii.github.io/tags/database/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Tinykv（一）Standalone KV</title>
      <link>https://wuliuqii.github.io/posts/tinykv%E4%B8%80standalone-kv/</link>
      <pubDate>Sat, 30 Apr 2022 16:19:01 +0800</pubDate>
      
      <guid>https://wuliuqii.github.io/posts/tinykv%E4%B8%80standalone-kv/</guid>
      <description>TinyKV 是基于 TiKV 的 mini 版分布式 kv 数据库存储部分，是 tikv Talent Plan 课程的一部分。
TinyKV 的架构如下图所示：
Project1 主要是实现 Standalone Storage 以及 Raw API 这两部分。
Standalone Storage Standalone KV 基于 badger，实现了 Storage 接口
type Storage interface { 	Start() error 	Stop() error 	Write(ctx *kvrpcpb.Context, batch []Modify) error 	Reader(ctx *kvrpcpb.Context) (StorageReader, error) } 这里需要说一下的是，增加和删除的操作都是通过 Write 方法实现，区别这两种操作的方法是 batch 参数不一样
// Modify is a single modification to TinyKV&amp;#39;s underlying storage. type Modify struct { 	Data interface{} }  type Put struct { 	Key []byte 	Value []byte 	Cf string }  type Delete struct { 	Key []byte 	Cf string } Reader 方法返回的是一个 StorageReader 接口，可以实现单个 key 以及 iteration 的查询方式</description>
    </item>
    
  </channel>
</rss>
