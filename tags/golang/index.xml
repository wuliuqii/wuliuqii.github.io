<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Golang on wuliuqi</title>
    <link>https://wuliuqii.github.io/tags/golang/</link>
    <description>Recent content in Golang on wuliuqi</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sun, 24 Oct 2021 16:01:03 +0800</lastBuildDate><atom:link href="https://wuliuqii.github.io/tags/golang/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Weekly Contest 264</title>
      <link>https://wuliuqii.github.io/posts/weekly-contest-264/</link>
      <pubDate>Sun, 24 Oct 2021 16:01:03 +0800</pubDate>
      
      <guid>https://wuliuqii.github.io/posts/weekly-contest-264/</guid>
      <description>第 264 场周赛 https://leetcode-cn.com/contest/weekly-contest-264?utm_campaign=weekly_contest_2021_cider_264&amp;amp;utm_medium=leetcode_message&amp;amp;utm_source=message&amp;amp;gio_link_id=Y9JBn239
句子中的有效单词 https://leetcode-cn.com/problems/number-of-valid-words-in-a-sentence/
思路 直接模拟
代码 func countValidWords(sentence string) int { res := 0 tokens := strings.Fields(sentence) // 按照空格划分 	for _, token := range tokens { if isValid(token) { res++ } } return res } func isValid(token string) bool { if strings.ContainsAny(token, &amp;#34;0123456789&amp;#34;) { // 不能有数字 	return false } n := len(token) i := strings.IndexByte(token, &amp;#39;-&amp;#39;) if i &amp;gt;= 0 &amp;amp;&amp;amp; (strings.Contains(token[i+1:], &amp;#34;-&amp;#34;) || // 最多只能有一个连字符, 且左右都为小写字母 	i == 0 || i == n-1 || !</description>
    </item>
    
    <item>
      <title>6.824 lab1</title>
      <link>https://wuliuqii.github.io/posts/6.824-lab1/</link>
      <pubDate>Sun, 09 May 2021 20:30:53 +0800</pubDate>
      
      <guid>https://wuliuqii.github.io/posts/6.824-lab1/</guid>
      <description>6.824 Lab 1 课程主页: https://pdos.csail.mit.edu/6.824/schedule.html
Lab1: https://pdos.csail.mit.edu/6.824/labs/lab-mr.html
论文: http://static.googleusercontent.com/media/research.google.com/en//archive/mapreduce-osdi04.pdf
要求 lab 1 主要是实现一个简易版 MapReduce 系统，主要有两部分：
 worker：map、reduce 函数执行 ，文件读写处理 coordinate：任务调度 测试用例会有任务超时和 crash 的情况，需要有容错机制  整个流程大概可以简化成如下几步：
 启动 coordinate 进程，监听 worker 请求 启动单个或多个 worker 进程，worker 向 coordinate 请求任务 coordinate 处理 worker 的任务请求，步骤如下：  判断 map 任务是否全部完成 若未完成，挑选一个未完成的 map 任务，并将该任务状态设置为 assigned；否则判断 reduce 任务是否全部完成 若未完成，挑选一个未完成的 reduce 任务，并将该任务状态设置为 assigned   worker 收到任务后，根据任务类型执行对应的函数（map、reduce、wait） worker 完成任务后，向 coordinate 发送任务已完成 coordinate 将相应完成的任务的状态标记为 finished 重复 1-6 直至所有任务完成  worker worker 不断向 coordinate 请求任务，根据返回的任务进行处理，主体程序如下：</description>
    </item>
    
  </channel>
</rss>
